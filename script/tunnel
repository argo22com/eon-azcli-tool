#!/usr/bin/perl -w

use 5.014;
use strict;
use warnings;
use utf8;

sub tunnel_id {
    unless (defined $ARGV[1]) {
        print "Tunnel ID missing\n";
        exit 1;
    }
    my $tunnel_id = $ENV{"${ARGV[1]}_PORT"};
}

sub tunnel_start {
    my $tunnel_id = tunnel_id;
    my @env_names = ("NAME", "RG", "RID", "RPORT", "PORT");
    my @env_values = ();

    for my $i (@env_names) {
        my $var_name = "${ARGV[1]}_$i";
        if (!$ENV{$var_name}) {
            print "Missing environment variable '$var_name'.\n";
            exit 1;
        }
        push(@env_values, $ENV{$var_name});
    }
    my $pid = load_pid($tunnel_id);
    if ($pid) {
        print "Tunnel ('$tunnel_id') PID ('$pid') already exists\n";
        exit 1;
    }

    my $command_template = 'az network bastion tunnel '
        . '--name "%s" '
        . '--resource-group "%s" '
        . '--target-resource-id "%s" '
        . '--resource-port "%s" '
        . '--port "%s" '
        . '> /dev/null 2>&1 &';

    my $command = sprintf($command_template, @env_values);

    if (tunnel_run($command)) {
        print "Cannot establish tunnel\n";
        exit 1;
    }
    $pid = tunnel_pid($tunnel_id);
    store_pid($pid, $tunnel_id);

    print ("Tunnel PID: $pid" or "N/A, looks like an error occurred\n");
    exit 0;
}

sub tunnel_stop {
    my $tunnel_id = tunnel_id;
    my $pid = load_pid($tunnel_id);
    if (not $pid) {
        print "Cannot find tunnel pid\n";
        exit 1;
    }
    my $result = `kill -SIGINT $pid`;
    my $exit_code = $? >> 8;
    if ($exit_code) {
        print "Cannot stop tunnel '$pid'\n";
        print $result;
        exit $exit_code;
    }
    `rm /tmp/$tunnel_id`;
    exit 0;
}

sub tunnel_run {
    system shift;
    my $exit_code = $? >> 8;
}

sub tunnel_pid {
    my $grep_this = shift;
    my $pid = "ps |grep $grep_this| grep -v grep | awk '{print \$1}'";
    $pid = `$pid`;
    $pid =~ s/\s\n//;
    return $pid;
}

sub store_pid {
    my $pid = shift;
    my $tunnel_id = shift;
    $pid =~ s/\s\n//;
    `echo "$pid" > /tmp/$tunnel_id`;
}

sub load_pid {
    my $tunnel_id = shift;
    my $pid = `cat /tmp/$tunnel_id 2> /dev/null`;
    $pid =~ s/\s\n//;
    return $pid;
}

sub tunnel_list {
    my $cmd = "env |grep PORT |grep -v RPORT";
    for my $i (`$cmd`) {
        my @list = split '=', $i;
        next unless $#list == 1;
        chomp($list[1]);
        next unless load_pid $list[1];
        my @tunnel_env = split '_', $list[0];
        next unless $#tunnel_env > 0;
        pop @tunnel_env;
        my $tunnel_id = join '_', @tunnel_env;
        print "$tunnel_id -> ${list[1]}\n";
    }
    exit 0;
}

unless ($#ARGV > -1) {
    print "Specify tunnel operation start|stop|show\n";
    exit 1;
}
tunnel_start if $ARGV[0] eq "start";
tunnel_stop if $ARGV[0] eq "stop";
tunnel_list if $ARGV[0] eq "show";
print "Invalid operation '${ARGV[0]}'\n";
exit 1;
