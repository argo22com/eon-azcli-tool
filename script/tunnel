#!/usr/bin/perl -w

use 5.014;
use strict;
use warnings;
use utf8;

sub err {
    printf "%s\n", shift;
    my $exit_code = shift;
    $exit_code = 1 unless defined $exit_code;
    exit $exit_code;
}

sub tunnel_id {
    err "Tunnel ID missing" unless defined $ARGV[1];
    my $tunnel_id = $ENV{"${ARGV[1]}_PORT"};
}

sub tunnel_run {
    system shift;
    my $exit_code = $? >> 8;
}

sub tunnel_pid {
    my $grep_this = shift;
    my $pid = "ps |grep $grep_this| grep -v grep | awk '{print \$1}'";
    $pid = `$pid`;
    chomp($pid);
    return $pid;
}

sub store_pid {
    my $pid = shift;
    my $tunnel_id = shift;
    chomp($pid);
    `echo "$pid" > /tmp/$tunnel_id`;
}

sub load_pid {
    my $tunnel_id = shift;
    my $pid = `cat /tmp/$tunnel_id 2> /dev/null`;
    chomp($pid);
    return $pid;
}

sub env_value {
    my $var_name = "${ARGV[1]}_$_";
    err "Missing environment variable '$var_name'.\n" unless $ENV{$var_name};
    $var_name = $ENV{$var_name};
}

sub tunnel_start {
    my $tunnel_id = tunnel_id;
    my @env_values = ();

    push @env_values, env_value $_ for ("NAME", "RG", "RID", "RPORT", "PORT");
    my $pid = load_pid $tunnel_id;

    err "Tunnel ('$tunnel_id') PID ('$pid') already exists" if $pid;

    my $command_template = 'az network bastion tunnel '
        . '--name "%s" '
        . '--resource-group "%s" '
        . '--target-resource-id "%s" '
        . '--resource-port "%s" '
        . '--port "%s" '
        . '> /dev/null 2>&1 &';

    my $command = sprintf $command_template, @env_values;

    err "Cannot establish tunnel\n" if tunnel_run $command;

    $pid = tunnel_pid $tunnel_id;
    store_pid $pid, $tunnel_id;

    print "Tunnel PID: $pid\n";
    exit 0;
}

sub tunnel_stop {
    my $tunnel_id = tunnel_id;
    my $pid = load_pid $tunnel_id;

    err "Cannot find tunnel pid" unless $pid;

    my $result = `kill -SIGINT $pid`;
    my $exit_code = $? >> 8;

    err "Cannot stop tunnel '$pid'\n$result", $exit_code if $exit_code;

    `rm /tmp/$tunnel_id`;
    exit 0;
}

sub get_stat {
    my $lc = sprintf "ps |grep %s |wc -l", @_;
    $lc = `$lc`;
    chomp($lc);
    $lc == 3
}

sub tunnel_list {
    my $cmd = "env |grep PORT |grep -v RPORT";
    for my $i (`$cmd`) {
        my @list = split '=', $i;
        next unless $#list == 1;
        chomp($list[1]);
        next unless load_pid $list[1];
        my @tunnel_env = split '_', $list[0];
        next unless $#tunnel_env > 0;
        pop @tunnel_env;
        my $tunnel_id = join '_', @tunnel_env;
        unless (get_stat ${list[1]}) {
            print "$tunnel_id stale, clearing reference...\n";
            `rm /tmp/${list[1]}`;
            next;
        }
        print "$tunnel_id -> ${list[1]}\n";
    }
    exit 0;
}

err "Specify tunnel operation start|stop|show" unless $#ARGV > -1;

tunnel_start if $ARGV[0] eq "start";
tunnel_stop if $ARGV[0] eq "stop";
tunnel_list if $ARGV[0] eq "show";

err "Invalid operation '${ARGV[0]}'";
